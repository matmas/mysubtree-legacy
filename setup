#!/bin/bash
function confirm {
	local message="$1"
	if [[ -z "$all" ]]; then
		read -p "$message? [Y/n/a] " answer
		if [[ -z "$answer" || "$answer" =~ ^[yYaA] ]]; then
			if [[ "$answer" =~ ^[aA] ]]; then
				all=1
			fi
		else
			exit 1
		fi
	else
		echo "Executing $message..."
	fi
}

function require_python_packages {
        local necessary_packages="$@"
	pipfreeze=$(pip freeze)
        to_install=""
        for package in $necessary_packages; do
                if [ -z "`echo \"$pipfreeze\" | grep ^$package=`" ]; then
                        to_install="$to_install $package"
                fi
        done
        if [ "$to_install" ]; then
		for package in $to_install; do
			install_command="pip install $package"
			confirm "$install_command"
			$install_command || exit 1
		done
        fi
}

function require {
	local command="$1"
	local arch="$2"
	local ubuntu="$3"
	
	if [ "$distro" == "arch" ]; then
		local toinstall="$arch"
	elif [ "$distro" == "ubuntu" ]; then
		local toinstall="$ubuntu"
	fi
	type -P $command &>/dev/null || ls $command &>/dev/null || [ "$toinstall" == "" ] || {
		echo "$command missing" >&2
		confirm "$toinstall"
		$toinstall || exit 1
	}
}

function create_postgresql_user_and_db {
	local me=`whoami`
	psql -c '\qecho test'           >/dev/null 2>&1 || ( confirm "create user & db"    && sudo -i -u postgres createuser -s $me && sudo -i -u postgres createdb $me )
	psql -c '\qecho test' mysubtree >/dev/null 2>&1 || ( confirm "create db mysubtree" && sudo -i -u postgres createdb mysubtree )
	psql -c '\qecho test' test      >/dev/null 2>&1 || ( confirm "create db test"      && sudo -i -u postgres createdb test )
}


if [ -f /etc/arch-release ]; then
        distro="arch"
elif [ -f /etc/lsb-release ]; then
        distro="ubuntu"
else
        echo "Unexpected distro"; exit 1
fi
####################################################################
####################################################################
####################################################################

if [ "$distro" == "arch" ]; then
	ruby_version="2.0.0"
elif [ "$distro" == "ubuntu" ]; then
	ruby_version="1.8"
fi
RUBY_PATH="$HOME/.gem/ruby/$ruby_version/bin"
PATH="$PATH:$RUBY_PATH"

# Arch Linux
# Ubuntu Server  10.04 Lucid
require pg_config     "sudo pacman -S postgresql"        "sudo aptitude install postgresql"
require pg_buildext   ""                                 "sudo aptitude install postgresql-server-dev-all"

require memcached     "sudo pacman -S memcached"          "sudo aptitude install memcached" 
. run-servers

if [ "$distro" == "arch" ]; then
    create_postgresql_user_and_db
fi

require python-config "sudo pacman -S python"             "sudo aptitude install python-dev"
require tidy          "sudo pacman -S tidyhtml"           "sudo aptitude install tidy"
require virtualenv    "sudo pacman -S python-virtualenv"  "sudo aptitude install python-virtualenv"
require npm           "sudo pacman -S nodejs"             "sudo aptitude install nodejs npm"
require gem           "sudo pacman -S ruby"               "sudo aptitude install rubygems" 
require /usr/include/libmemcached/memcached.h "sudo pacman -S libmemcached" "sudo aptitude install libmemcached-dev" 

require xml2-config   ""                                  "sudo aptitude install libxml2-dev" # pyquery dependency
require xslt-config   ""                                  "sudo aptitude install libxslt1-dev" # pyquery dependency

require nginx         ""                                  "sudo aptitude install nginx"
require $RUBY_PATH/compass "gem install compass"          ""
require compass       ""                                  "sudo gem install compass --no-ri --no-rdoc"
require coffee        "sudo npm install -g coffee-script" "sudo npm install -g coffee-script" # live server
require uglifyjs      "sudo npm install -g uglify-js"     "sudo npm install -g uglify-js"


# if [ ! -d "$HOME/.venv" ]; then
#     virtualenv --python=python2.7 $HOME/.venv || virtualenv --python=python2.6 $HOME/.venv || exit 1
# fi

cd src/mysubtree/backend/live/live_server
npm install
cd $OLDPWD

cd src/mysubtree/web/components/ext/famfamfam
./install.sh
cd $OLDPWD

if [[ $VIRTUAL_ENV ]]; then
    cd src
    python main_initdb.py
    python main_assetwatch.py
    cd $OLDPWD
fi
####################################################################
# Currently not in use:





#  gem install compass-rmagick-engine
#  `: pyinotify    : watchdog dependency`\
#pip install translitcodec
#pip install pyprof2calltree
#pip install profilestats
#gem install rb-inotify
#gem install oily_png
